name: Goose Code Review with Gemini

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  goose-code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gather repository information and file contents
        run: |
          {
            echo "# Repository Code Review"
            echo "**Branch:** $(git branch --show-current)"
            echo "**Date:** $(date)"
            echo "**Repository:** ${{ github.repository }}"
            echo ""
            echo "# Files to Review"
            
            # Find all code files (excluding common non-code files)
            find . -type f \
              ! -path "./.git/*" \
              ! -path "./node_modules/*" \
              ! -path "./.next/*" \
              ! -path "./dist/*" \
              ! -path "./build/*" \
              ! -path "./.vscode/*" \
              ! -path "./.idea/*" \
              ! -path "./vendor/*" \
              ! -path "./target/*" \
              ! -path "./.gradle/*" \
              ! -path "./cmake-build-*/*" \
              ! -name "*.log" \
              ! -name "*.lock" \
              ! -name "*.tmp" \
              ! -name "*.cache" \
              ! -name "*.min.js" \
              ! -name "*.min.css" \
              ! -name "package-lock.json" \
              ! -name "yarn.lock" \
              ! -name "*.png" \
              ! -name "*.jpg" \
              ! -name "*.jpeg" \
              ! -name "*.gif" \
              ! -name "*.svg" \
              ! -name "*.ico" \
              ! -name "*.pdf" \
              ! -name "*.exe" \
              ! -name "*.dll" \
              ! -name "*.so" \
              -size -100k \
              | head -30 > files_to_review.txt
            
            # Show file list
            echo "Found $(wc -l < files_to_review.txt) files to review:"
            while read file; do
              if [ -f "$file" ]; then
                lines=$(wc -l < "$file" 2>/dev/null || echo "0")
                size=$(du -h "$file" 2>/dev/null | cut -f1 || echo "0K")
                echo "* $file ($lines lines, $size)"
              fi
            done < files_to_review.txt
            
            echo ""
            echo "# File Contents"
            
            # Show content of each file
            while read file; do
              if [[ -f "$file" && $(wc -l < "$file" 2>/dev/null || echo "1000") -lt 800 ]]; then
                echo ""
                echo "## üìÅ File: $file"
                echo '```'
                cat "$file"
                echo '```'
              elif [[ -f "$file" ]]; then
                echo ""
                echo "## üìÅ File: $file (Large file - showing first 200 lines)"
                echo '```'
                head -200 "$file"
                echo '```'
              fi
            done < files_to_review.txt
            
          } > changes.txt

      - name: Install Goose CLI
        run: |
          mkdir -p /home/runner/.local/bin
          curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
          echo "/home/runner/.local/bin" >> $GITHUB_PATH

      - name: Configure Goose for Gemini
        run: |
          mkdir -p ~/.config/goose
          cat <<EOF > ~/.config/goose/config.yaml
          GOOSE_PROVIDER: google
          GOOSE_MODEL: gemini-2.0-flash-exp
          keyring: false
          EOF

      - name: Create comprehensive code review instructions
        run: |
          cat <<EOF > instructions.txt
          You are an expert code reviewer. Please perform a comprehensive and constructive code review of the provided repository files.

          ## Review Guidelines:
          1. **Code Quality & Best Practices**
             - Check for coding standards compliance
             - Identify potential improvements in code structure
             - Look for proper error handling
             - Verify naming conventions

          2. **Security & Performance**
             - Identify potential security vulnerabilities
             - Look for performance bottlenecks
             - Check for proper input validation
             - Review resource management

          3. **Maintainability & Readability**
             - Assess code clarity and documentation
             - Check for code duplication
             - Evaluate function/class design
             - Review comment quality

          4. **Testing & Quality Assurance**
             - Suggest areas that need testing
             - Identify edge cases
             - Check for proper test coverage

          5. **Architecture & Design**
             - Evaluate overall code architecture
             - Check for proper separation of concerns
             - Review design patterns usage
             - Assess scalability considerations

          ## Output Format:
          Please structure your review as follows:

          ### üîç **Overall Assessment**
          Brief summary of the codebase and general code quality.

          ### üìã **File-by-File Review**
          For each file:

          #### üìÅ \`filename\`
          **Purpose:** What this file does
          **Strengths:** What's done well
          **Issues:** Any problems found (with severity: üî¥ Critical, üü° Minor, üîµ Suggestion)
          **Recommendations:** Specific improvement suggestions

          ### üèóÔ∏è **Architecture & Design Review**
          - Overall code organization
          - Design patterns and architectural decisions
          - Suggestions for improvement

          ### ‚úÖ **Action Items**
          - [ ] Critical issues to fix immediately
          - [ ] Minor improvements to consider
          - [ ] Future enhancements to think about

          ### üéØ **Conclusion**
          Overall code quality assessment and recommendations.

          ## Code to Review:
          \$(cat changes.txt)
          EOF

      - name: Debug - Show instructions
        run: |
          echo "=== INSTRUCTIONS ==="
          head -50 instructions.txt
          echo "=== CHANGES PREVIEW ==="
          head -50 changes.txt

      - name: Run Goose code review
        run: |
          goose run --instructions instructions.txt 2>&1 | \
            # Remove ANSI color codes
            sed -E 's/\x1B\[[0-9;]*[mK]//g' | \
            # Remove session/logging lines
            grep -v "logging to /home/runner/.config/goose/sessions/" | \
            grep -v "^starting session" | \
            grep -v "^Closing session" | \
            grep -v "^Session saved to" | \
            # Remove empty lines at start/end
            sed '/^[[:space:]]*$/d' | \
            # Trim trailing whitespace
            sed 's/[[:space:]]*$//' \
            > pr_review.txt

      - name: Validate review output
        run: |
          if [[ ! -s pr_review.txt ]]; then
            echo "‚ùå No review output generated" > pr_review.txt
            echo "The code review process encountered an issue. Please check the workflow logs." >> pr_review.txt
          else
            echo "‚úÖ Review generated successfully ($(wc -l < pr_review.txt) lines)"
          fi

      - name: Create GitHub Issue with review results
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create issue title with timestamp
          ISSUE_TITLE="ü§ñ Complete Code Review Report - $(date +'%Y-%m-%d %H:%M')"
          
          # Prepare issue body
          {
            echo "## ü§ñ Complete Repository Code Review"
            echo ""
            echo "**Branch:** $(git branch --show-current)"
            echo "**Repository:** ${{ github.repository }}"
            echo "**Generated:** $(date)"
            echo "**Powered by:** Google Gemini via Goose AI"
            echo ""
            echo "---"
            echo ""
            cat pr_review.txt
            echo ""
            echo "---"
            echo ""
            echo "### üìã Files Reviewed ($(wc -l < files_to_review.txt) files)"
            while read file; do
              if [ -f "$file" ]; then
                lines=$(wc -l < "$file" 2>/dev/null || echo "0")
                size=$(du -h "$file" 2>/dev/null | cut -f1 || echo "0K")
                echo "- \`$file\` ($lines lines, $size)"
              fi
            done < files_to_review.txt
            echo ""
            echo "*This comprehensive review was automatically generated by Goose AI using Google Gemini.*"
          } > issue_body.txt
          
          # Create the issue
          gh issue create \
            --title "$ISSUE_TITLE" \
            --body-file issue_body.txt \
            --label "code-review,automated"

      - name: Upload artifacts for debugging
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: goose-review-artifacts
          path: |
            changes.txt
            instructions.txt
            pr_review.txt
            issue_body.txt
            files_to_review.txt